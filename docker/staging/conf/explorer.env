GUNICORN_LOG_FILE=/build_docker/webflask/config/logging.conf
WEB_PORT=5000
WEB_HOST=0.0.0.0
# TODO properly scale web workers and per-chain processes both demanding db connections
# The solution is simple: use a connection pool already transparently implemented using minql.zmq
WEB_WORKERS=30
WEB_TIMEOUT=120

DB_TYPE=postgres
DB_ADR=postgres:5432
DB_NAME=postgres
DB_USER=postgres
DB_PASS=password
DB_PROXY_TYPE=postgres
DB_PROXY_ADR=tcp://0.0.0.0:1984
DB_BACKEND_ADR=postgres:5432
ORM_MODEL=/build_docker/explorer/domain/db_domain.py
ORM_SCHEMA=/build_docker/target/schema.json

DEFAULT_CHAIN=elementsregtest

BITCOIN_ADR=daemons:8532
BITCOIN_ZMQ=tcp://daemons:8534
BITCOIN_RPCUSER=user8532
BITCOIN_RPCPASSWORD=password8532

TESTNET3_ADR=daemons:18532
TESTNET3_ZMQ=tcp://daemons:18534
TESTNET3_RPCUSER=user18532
TESTNET3_RPCPASSWORD=password18532

REGTEST_ADR=daemons:18535
REGTEST_ZMQ=tcp://daemons:18537
REGTEST_RPCUSER=user18535
REGTEST_RPCPASSWORD=password18535

SIGNET_ADR=daemons:18538
SIGNET_ZMQ=tcp://daemons:18540
SIGNET_RPCUSER=user18538
SIGNET_RPCPASSWORD=password18538

ELEMENTSREGTEST_ADR=daemons:7041
ELEMENTSREGTEST_ZMQ=tcp://daemons:7043
ELEMENTSREGTEST_RPCUSER=user7041
ELEMENTSREGTEST_RPCPASSWORD=password7041

ELEMENTSPARENT_ADR=daemons:7044
ELEMENTSPARENT_ZMQ=tcp://daemons:7046
ELEMENTSPARENT_RPCUSER=user7044
ELEMENTSPARENT_RPCPASSWORD=password7044

ELEMENTSIDE_ADR=daemons:7047
ELEMENTSIDE_ZMQ=tcp://daemons:7049
ELEMENTSIDE_RPCUSER=user7047
ELEMENTSIDE_RPCPASSWORD=password7047

SIGNETSIDE_ADR=daemons:7050
SIGNETSIDE_ZMQ=tcp://daemons:7052
SIGNETSIDE_RPCUSER=user7050
SIGNETSIDE_RPCPASSWORD=password7050
