GUNICORN_LOG_FILE=/build_docker/webflask/config/logging.conf
WEB_PORT=5000
WEB_HOST=0.0.0.0
# TODO properly scale web workers and per-chain processes both demanding db connections
# The solution is simple: use a connection pool already transparently implemented using minql.zmq
WEB_WORKERS=30
WEB_TIMEOUT=120

DB_TYPE=postgres
DB_ADR=postgres:5432
DB_NAME=postgres
DB_USER=postgres
DB_PASS=password
DB_PROXY_TYPE=postgres
DB_PROXY_ADR=tcp://0.0.0.0:1984
DB_BACKEND_ADR=postgres:5432
ORM_MODEL=/build_docker/explorer/domain/db_domain.py
ORM_SCHEMA=/root/target/schema.json

BITCOIN_ADR=bitcoin:8532
BITCOIN_ZMQ=tcp://bitcoin:8534
BITCOIN_RPCUSER=user8532
BITCOIN_RPCPASSWORD=password8532

TESTNET3_ADR=bitcoin:18532
TESTNET3_ZMQ=tcp://bitcoin:18534
TESTNET3_RPCUSER=user18532
TESTNET3_RPCPASSWORD=password18532

REGTEST_ADR=bitcoin:18535
REGTEST_ZMQ=tcp://bitcoin:18537
REGTEST_RPCUSER=user18535
REGTEST_RPCPASSWORD=password18535

ELEMENTSREGTEST_ADR=elements:7041
ELEMENTSREGTEST_ZMQ=tcp://elements:7043
ELEMENTSREGTEST_RPCUSER=user7041
ELEMENTSREGTEST_RPCPASSWORD=password7041

ELEMENTSPARENT_ADR=elements:7044
ELEMENTSPARENT_ZMQ=tcp://elements:7046
ELEMENTSPARENT_RPCUSER=user7044
ELEMENTSPARENT_RPCPASSWORD=password7044

ELEMENTSIDE_ADR=elements:7047
ELEMENTSIDE_ZMQ=tcp://elements:7049
ELEMENTSIDE_RPCUSER=user7047
ELEMENTSIDE_RPCPASSWORD=password7047
